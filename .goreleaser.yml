before:
  hooks:
    - pwd
# builds:
# - env:
#   - VERSION={{ .Version }}
#   # hooks:
#   #   pre: sed -i -e s/0.0.0/{{ .Version }}/ app/main.go
#   ldflags:
#     - -s -w -X main.build={{.Version}}
archives:
- replacements:
    darwin: Darwin
    linux: Linux
    windows: Windows
    386: i386
    amd64: x86_64
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
# sign:
#    artifacts: checksum
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'
release:
  # Repo in which the release will be created.
  # Default is extracted from the origin remote URL.
  github:
    owner: dx-oss
    name: boilr

  # If set to true, will not auto-publish the release.
  # Default is false.
  draft: false

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # You can change the name of the GitHub release.
  # Default is `{{.Tag}}`
  name_template: "{{.ProjectName}}-v{{.Version}}"
dockers:
  # You can have multiple Docker images.
  -
    # GOOS of the built binary that should be used.
    goos: linux
    # GOARCH of the built binary that should be used.
    goarch: amd64
    # GOARM of the built binary that should be used.
    goarm: ''
    # Name templates of the built binaries that should be used.
    binaries:
    - "{{.ProjectName}}"
    # Templates of the Docker image names.
    image_templates:
    - "docker.pkg.github.com/dx-oss/boilr/{{.ProjectName}}:latest"
    - "docker.pkg.github.com/dx-oss/boilr/{{.ProjectName}}:{{ .Tag }}"
    - "docker.pkg.github.com/dx-oss/boilr/{{.ProjectName}}:v{{ .Major }}"
    #- "gcr.io/{{ .Env.GOOGLE_DOCKER_REPO_URL }}/{{.ProjectName}}:latest"
    # Skips the docker push. Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the docker repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Defaults to false.
    #skip_push: false
    # Path to the Dockerfile (from the project root).
    dockerfile: .goreleaser.Dockerfile
    # Template of the docker build flags.
    build_flag_templates:
    - "--label=org.label-schema.schema-version=1.0"
    - "--label=org.label-schema.version={{.Version}}"
    - "--label=org.label-schema.name={{.ProjectName}}"
    # - "--build-arg=FOO={{.ENV.Bar}}"
    # If your Dockerfile copies files other than the binary itself,
    # you should list them here as well.
    # Note that goreleaser will create the same structure inside the temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # goreleaser is being run.
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    # extra_files:
    # - .env-example
